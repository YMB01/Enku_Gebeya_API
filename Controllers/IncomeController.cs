using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using MySqlConnector;
using System; // For DateTime
using System.Collections.Generic;
using System.Data;

namespace NemoLightAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")] // This will make the route "api/income"
    public class IncomeController : ControllerBase
    {
        private readonly string _connectionString;

        // Constructor to inject configuration and get the connection string
        public IncomeController(IConfiguration configuration)
        {
            _connectionString = configuration.GetConnectionString("DefaultConnection"); // Ensure this matches your appsettings.json
        }

        // --- Data Transfer Object (DTO) for Income Input ---
        // This class defines the shape of the data expected in API requests (POST/PUT)
        public class IncomeDto
        {
            // Note: 'id' is typically auto-generated by the database for new records,
            // and provided in the route for updates/deletes.
            public DateTime Date { get; set; } // Changed to DateTime for C#
            public string Source { get; set; }
            public string Description { get; set; }
            public decimal Amount { get; set; }
        }

        // --- API Endpoints ---

        // GET: api/income
        // Retrieves all income records
        [HttpGet]
        public IActionResult GetAllIncome()
        {
            var incomeEntries = new List<object>(); // Using object for flexibility, consider a dedicated IncomeModel class
            try
            {
                using var conn = new MySqlConnection(_connectionString);
                using var cmd = new MySqlCommand("GetAllIncome", conn) { CommandType = CommandType.StoredProcedure };
                conn.Open();
                using var reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    incomeEntries.Add(new
                    {
                        Id = reader["id"],
                        Date = ((DateTime)reader["date"]).ToString("yyyy-MM-dd"), // Format date for consistent output
                        Source = reader["source"],
                        Description = reader["description"],
                        Amount = reader["amount"]
                    });
                }
                return Ok(incomeEntries);
            }
            catch (Exception ex)
            {
                // Log the exception (e.g., using ILogger)
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // GET: api/income/{id}
        // Retrieves a single income record by its ID
        [HttpGet("{id}")]
        public IActionResult GetIncomeById(int id)
        {
            object incomeEntry = null;
            try
            {
                using var conn = new MySqlConnection(_connectionString);
                using var cmd = new MySqlCommand("GetIncomeById", conn) { CommandType = CommandType.StoredProcedure };
                cmd.Parameters.AddWithValue("@p_id", id); // Match parameter name from SP
                conn.Open();
                using var reader = cmd.ExecuteReader();
                if (reader.Read())
                {
                    incomeEntry = new
                    {
                        Id = reader["id"],
                        Date = ((DateTime)reader["date"]).ToString("yyyy-MM-dd"),
                        Source = reader["source"],
                        Description = reader["description"],
                        Amount = reader["amount"]
                    };
                }

                if (incomeEntry == null)
                {
                    return NotFound($"Income record with ID {id} not found.");
                }
                return Ok(incomeEntry);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // POST: api/income
        // Inserts a new income record
        [HttpPost]
        public IActionResult InsertIncome([FromBody] IncomeDto incomeDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState); // Returns validation errors
            }

            try
            {
                using var conn = new MySqlConnection(_connectionString);
                using var cmd = new MySqlCommand("InsertIncome", conn) { CommandType = CommandType.StoredProcedure };
                cmd.Parameters.AddWithValue("@p_date", incomeDto.Date.ToString("yyyy-MM-dd")); // Format date for MySQL
                cmd.Parameters.AddWithValue("@p_source", incomeDto.Source);
                cmd.Parameters.AddWithValue("@p_description", incomeDto.Description);
                cmd.Parameters.AddWithValue("@p_amount", incomeDto.Amount);
                conn.Open();
                cmd.ExecuteNonQuery();
                return StatusCode(201, "Income record added successfully."); // 201 Created
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // PUT: api/income/{id}
        // Updates an existing income record
        [HttpPut("{id}")]
        public IActionResult UpdateIncome(int id, [FromBody] IncomeDto incomeDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            try
            {
                using var conn = new MySqlConnection(_connectionString);
                using var cmd = new MySqlCommand("UpdateIncome", conn) { CommandType = CommandType.StoredProcedure };
                cmd.Parameters.AddWithValue("@p_id", id); // ID from route
                cmd.Parameters.AddWithValue("@p_date", incomeDto.Date.ToString("yyyy-MM-dd"));
                cmd.Parameters.AddWithValue("@p_source", incomeDto.Source);
                cmd.Parameters.AddWithValue("@p_description", incomeDto.Description);
                cmd.Parameters.AddWithValue("@p_amount", incomeDto.Amount);
                conn.Open();
                int rowsAffected = cmd.ExecuteNonQuery();

                if (rowsAffected == 0)
                {
                    return NotFound($"Income record with ID {id} not found for update.");
                }
                return Ok($"Income record with ID {id} updated successfully.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }

        // DELETE: api/income/{id}
        // Deletes an income record
        [HttpDelete("{id}")]
        public IActionResult DeleteIncome(int id)
        {
            try
            {
                using var conn = new MySqlConnection(_connectionString);
                using var cmd = new MySqlCommand("DeleteIncome", conn) { CommandType = CommandType.StoredProcedure };
                cmd.Parameters.AddWithValue("@p_id", id);
                conn.Open();
                int rowsAffected = cmd.ExecuteNonQuery();

                if (rowsAffected == 0)
                {
                    return NotFound($"Income record with ID {id} not found for deletion.");
                }
                return Ok($"Income record with ID {id} deleted successfully.");
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    }
}